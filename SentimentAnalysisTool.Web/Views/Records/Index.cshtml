@model SentimentAnalysisTool.Web.Models.RecordDisplayViewModel

<div class="row">
    <div class="col-12">
        <div class="card mb-2 shadow-sm">
            <div class="card-body">

                <div class="row">
                    <form method="post" id="formUpload" enctype="multipart/form-data">
                        <div class="input-group">
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" name="file" id="customfile" required />
                                <label class="custom-file-label" for="customfile">Choose file</label>
                            </div>
                        </div>
                        <div class="form-check form-check-inline mt-2">
                            <input class="form-check-input" type="radio" name="algorithmnType" value="@SentimentAnalysisTool.Web.Enums.AlgorithmnType.Hybrid">
                            <label class="form-check-label">@nameof(SentimentAnalysisTool.Web.Enums.AlgorithmnType.Hybrid)</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="algorithmnType" value="@SentimentAnalysisTool.Web.Enums.AlgorithmnType.SentiWordNet">
                            <label class="form-check-label">@nameof(SentimentAnalysisTool.Web.Enums.AlgorithmnType.SentiWordNet)</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="algorithmnType" value="@SentimentAnalysisTool.Web.Enums.AlgorithmnType.Vader">
                            <label class="form-check-label">@nameof(SentimentAnalysisTool.Web.Enums.AlgorithmnType.Vader)</label>
                        </div>

                        <input id="formSubmit" type="submit" class="btn btn-dark" value="Submit file" />
                    </form>
                </div>
                <div class="row mt-1">
                    <div class="alert alert-danger" id="warningMessage" role="alert" style="display:none;">
                        Please upload csv files only
                    </div>
                    <div class="alert alert-warning" id="errorNetwork" role="alert" style="display:none;">
                        No network connection! Please try again later.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="spinner-upload" class="overlayDiv" style="display:none;">
    <lottie-player src="https://assets6.lottiefiles.com/datafiles/bEYvzB8QfV3EM9a/data.json" background="transparent" speed="1" style="width: 300px; height: 300px;" loop autoplay></lottie-player>
</div>
<div class="row" id="record-display">
    @await Html.PartialAsync("_RecordDisplayPartial", Model)
</div>
@section scripts{
    <script src="~/js/records-index.js"></script>
    <script>
        $(document).ready(function () {
            $('form#formUpload').submit(function (event) {
                event.preventDefault();
                var formData = new FormData(this);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("UploadCsvFile","Records")',
                    data: formData,
                    beforeSend: function () {
                        $('#spinner-upload').show();
                    },
                    complete: function () {
                        $('#spinner-upload').hide();
                    },
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        promptHasNetwork(response);
                    },
                    error: function (response) { promptNoNetwork(response) },
                    failure: function (response) { promptNoNetwork(response) },
                }).done(function (response) {
                    $('#record-display').html(response.html);
                    const ctx = document.getElementById('myChart').getContext('2d');
                    const myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: ['Positive', 'Negative'],
                            datasets: [{
                                label: 'Review Classification',
                                data: [response.reviewClassification.positivePercent, response.reviewClassification.negativePercent],
                                backgroundColor: [
                                    'rgba(255, 99, 132, 0.2)',
                                    'rgba(54, 162, 235, 0.2)',                                   
                                ],
                                borderColor: [
                                    'rgba(255, 99, 132, 1)',
                                    'rgba(54, 162, 235, 1)',                                    
                                ],
                                borderWidth: 1
                            }]
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                });
            });
        });
    </script>
}
