@using SentimentAnalysisTool.Data.Enums
@using SentimentAnalysisTool.Data.Models
@model dynamic
@if (Model.Count == 0)
{
    <p>No results found!</p>
}
else
{
    <div class="table-responsive table-height-comments">
        <table class="table table-hover">
            <thead class="thead-light table-sticky">
                <tr>
                    <th scope="col">Comment </th>
                    <th scope="col">Transformed Comment </th>
                    <th scope="col">Sentiment </th>
                    <th scope="col">Action </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Count; i++)
                {
                <tr>
                    <td>@Model[i].CommentDetail</td>
                    <td>@Model[i].TransformedCommentDetail</td>


                    @switch (Model[i].Algorithmn)
                    {
                        case AlgorithmnType.Hybrid:
                            @if (Model[i].CommentPolarity.Equals(SentimentType.Negative.ToString()))
                            {
                                <td><span class="badge badge-secondary">@(((HybridModel)Model[i].AlgorithmnGrade).HybridScore) <i class="fas fa-sad-tear"></i></span></td>
                            }
                            else
                            {
                                <td><span class="badge badge-primary">@(((HybridModel)Model[i].AlgorithmnGrade).HybridScore) <i class="fa-solid fa-face-laugh-beam"></i></span></td>
                            }
                            break;
                        case AlgorithmnType.SentiWordNet:
                            @if (Model[i].CommentPolarity.Equals(SentimentType.Negative.ToString()))
                            {
                                <td><span class="badge badge-secondary">@(((SentiWordNetModel)Model[i].AlgorithmnGrade).SentimentScore) <i class="fas fa-sad-tear"></i></span></td>
                            }
                            else
                            {
                                <td><span class="badge badge-primary">@(((SentiWordNetModel)Model[i].AlgorithmnGrade).SentimentScore) <i class="fa-solid fa-face-laugh-beam"></i></span></td>
                            }
                            break;
                        case AlgorithmnType.Vader:
                            @if (Model[i].CommentPolarity.Equals(SentimentType.Negative.ToString()))
                            {
                                <td><span class="badge badge-secondary">@(((VaderModel)Model[i].AlgorithmnGrade).CompoundScore) <i class="fas fa-sad-tear"></i></span></td>
                            }
                            else
                            {
                                <td><span class="badge badge-primary">@(((VaderModel)Model[i].AlgorithmnGrade).CompoundScore) <i class="fa-solid fa-face-laugh-beam"></i></span></td>
                            }
                            break;
                    }

                    <td>
                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#resultModal_@i">
                            View computed results
                        </button>
                    </td>
                </tr>
                    ViewData["index"] = i;
                    switch (Model[i].Algorithmn)
                    {
                        case AlgorithmnType.Hybrid:
                            @await Html.PartialAsync("_ComputedResultsHybridPartial", (HybridModel)Model[i].AlgorithmnGrade)
                            break;
                        case AlgorithmnType.SentiWordNet:
                            @await Html.PartialAsync("_ComputedResultsSentiwordPartial", (SentiWordNetModel)Model[i].AlgorithmnGrade)
                            break;
                        case AlgorithmnType.Vader:
                            @await Html.PartialAsync("_ComputedResultsVaderPartial", (VaderModel)Model[i].AlgorithmnGrade)
                            break;
                    }
                }
            </tbody>
        </table>
    </div>
}


